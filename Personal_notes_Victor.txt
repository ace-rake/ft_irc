# Sockets

Note:	All examples given here are from ./srcs/server/socket_server.cpp

Sockets need a port, here we define the port as 12345

	#define PORT 12345



these will hold some basic info like server_fd

	int main() {
	int server_fd, new_socket;
	struct sockaddr_in address;
	int addrlen = sizeof(address);
	const char *message = "For the Emperor!";



This is what the sockaddr_in looks like

	#include <netinet/in.h>

	struct sockaddr_in {
	short            sin_family;   // e.g. AF_INET
	unsigned short   sin_port;     // e.g. htons(3490)
	struct in_addr   sin_addr;     // see struct in_addr, below
	char             sin_zero[8];  // zero this if you want to
	};


https://pubs.opengroup.org/onlinepubs/009696799/functions/socket.html
This function is to actually create a socket
	int socket(int domain, int type, int protocol);

	retval:		file descriptor for created socket
	domain:		Specifies communications domain ???
	type:		sype of socket
	protocol:	Specifies a protocol to be used with the socket
e.g.
	server_fd = socket(AF_INET, SOCK_STREAM, 0)
		AF_INET:	IPv4
		SOCK_STREAM:	TCP socket


https://pubs.opengroup.org/onlinepubs/007904875/functions/bind.html
Now we need to bind the socket to the address
	int bind(int socket, const struct sockaddr *address, socklen_t address_len);

	retval:		0 on success or -1 on failure
	socket:		the socket fd to bind
	address:	the address to bind
	address_len:	the length of the sockaddr struct from address
e.g.
	bind(server_fd, (struct sockaddr *)&address, sizeof(address))


https://pubs.opengroup.org/onlinepubs/009604499/functions/listen.html
How to listen for incomming connections to the created and bound socket
	int listen(int socket, int backlog);

	retval:		0 on success or -1 on failure
	socket:		The socket that is listening
	backlog:	How many connections can be made // https://stackoverflow.com/questions/10002868/what-value-of-backlog-should-i-use


https://pubs.opengroup.org/onlinepubs/009604499/functions/accept.html
How to accept incoming connection
	int accept(int socket, struct sockaddr *restrict address, socklen_t *restrict address_len);

	retval:		-1 on failure, otherwise the non-negative fd of the accepted socket
	socket:		the socket created with socket(), bound with bind() and listening with listen()
	address:	Either a null pointer, or a pointer to a sockaddr structure where the address of the connecting socket shall be returned.
	address_len:	socklen_tstruct whith the length of the supplies sockaddr
e.g.
	new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t *)&addrlen)


https://pubs.opengroup.org/onlinepubs/009695399/functions/send.html
How to send message through a socket
	ssize_t send(int socket, const void *buffer, size_t length, int flags);

	retval:		Number of bytes send,-1 if fail
	socket:		The socket to send the message to
	buffer:		the message to send
	length:		the length of the message in bytes
	flags:		Specifies the type of message transmission. Values of this argument are formed by logically OR'ing zero or more of the following flags:

MSG_EOR
    Terminates a record (if supported by the protocol).
MSG_OOB
    Sends out-of-band data on sockets that support out-of-band communications. The significance and semantics of out-of-band data are protocol-specific. 

e.g.
		send(new_socket, message.c_str(), static_cast<size_t>(message.size()), 0);
